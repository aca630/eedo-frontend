
import { DeleteColumnOutlined, DeleteOutlined, PlusOutlined } from "@ant-design/icons";
import { Button, Checkbox, Form, Input, InputNumber, Modal, Popconfirm, Select, Space, Table, Tag } from "antd";
import Cookies from "js-cookie";
import moment from "moment";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { ToastContainer, toast } from 'react-toastify';
import Layout from "../layouts";
import { deleteBetsetting, GetBetsetting, postBettsetting } from "../api/betsetting";





export default function Home(){
    const router = useRouter()
 //LW
 const [openModalLimit, setopenModalLimit] = useState(false);
 const handleCancelLimit = () => {
   setopenModalLimit(false);
 }
 const [betsettingdata, setbetsettingdata] = useState([]);
 const [isfetching, Setisfetching] = useState(false);
 const [confirmLoadingAdd, setConfirmLoadingAdd] = useState(false);
 const [form] = Form.useForm();
 const [is_all, setis_all] = useState(false);

 const onFinishLimit = async (values) => {
   try {

     let ApiResponse = await postBettsetting({
      betCode:  values.betCode.toString(),
       bet_limit: values.bet_limit.toString(),
       type: 0,
       is_all:0
     })
     Setisfetching(true)
     toast.success('Limit saved!')
     form.resetFields();
     setopenModalLimit(false);
     handleGetBettsetting();
     setis_all(false)
   }
   catch (error) {
     console.log(error);


     toast.error('Saving Failed!')
   }



 };
 const onFinishFailedLimit = (errorInfo) => {
   console.log('Failed:', errorInfo);
 };

 useEffect(()=>{

   handleGetBettsetting()
 },[])


 const onChangeCheck = (e) => {

    setis_all(!is_all)
    console.log(`checked = ${e.target.checked}`);
  };


 const handleChange = async (pagination, filters, sorter) => {

    // console.log( filters?.fullName);
    // // filters?.map((item) =>{

    // //   console.log( item);

    // // }); 


    Setisfetching(true);

    setInterval(() => {
      Setisfetching(false);

    }, 2000);

  };

 const handleGetBettsetting = async () => {

    try {

      let ApiResponse = await GetBetsetting({
        type:0
      })
      setbetsettingdata(ApiResponse?.data?.data);

      Setisfetching(false);
    }
    catch (error) {
      if (error?.response?.status == 401) {

        Cookies.remove('accessToken')
        router.push({
          pathname: `/`,
        });


      }

      console.log('Get bet setting Error: ', error?.response);
    }

  }

  const columnsBetsetting = [

    {
        title: 'Bet Code',
        dataIndex: 'betCode',
        key: 'betCode',
        render: (dom, entity) => {

            return (
              <Tag color="green">
              {dom}
              </Tag>
            );
      
        },
      },

      {
        title: 'Amount',
        dataIndex: 'bet_limit',
        key: 'bet_limit',
  
      },

  
    {
      title: 'Created at',
      dataIndex: 'created_at',
      valueType: 'textarea',
      render: (dom, entity) => {
        return (
          moment(dom)?.format('MM-DD-YYYY')
        );
      },
      // moment().format('MM-DD-YYYY, h:mm:ss a')
    },

    {
      title: 'Action',
      dataIndex: 'name',
      valueType: 'option',
      hideInDescriptions: false,
      fixed: 'right',
      width: 5,
      render: (id, record) => [
        <>
          <Space>

            <Popconfirm
              key="send"
              title={'Are you sure?'}
              description={'To submit this result'}
              okText={'Yes'}
              cancelText={'No'}
              placement="topLeft"
              onConfirm={ async () => {
                try{
                  let ApiResponse = await deleteBetsetting(record.id)
                  toast.success('Deleted successfully.')
                  handleGetBettsetting()

                }catch(error){
                  console.log('Error delete betsetting');
                }
              
              }}
            >
              <a href="#">
                <DeleteOutlined className="text-red-500 hover:text-red-700" />
              </a>
            </Popconfirm>
          </Space>
        </>
      ],
    },
  ];

    return(
      
    <Layout>
    <Head>
      <title>EEDO</title>
      <meta name="description" content="Generated by create next app" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <link rel="icon" href="/favicon.ico" />
    </Head>


       <div>


       <Button
          onClick={()=>{
            setopenModalLimit(true)
          }}
          type="primary"
          style={{
            marginBottom: 16,
          }}
          icon={<PlusOutlined />}
        >
          New
        </Button>



       <Table dataSource={betsettingdata} columns={columnsBetsetting} loading={isfetching} onChange={handleChange}
          pagination={{ defaultPageSize: 10, showSizeChanger: true, pageSizeOptions: ['10', '20', '30']}}
        
          />

        {/* START LW MODAL */}
        <Modal
          title={`Enter Limit: `}
          open={openModalLimit}
          confirmLoading={confirmLoadingAdd}
          onCancel={handleCancelLimit}
   width={800}
                footer={[]}
        >


          <Form
            form={form}
            name="basic"
            labelCol={{
              span: 6,
            }}
            wrapperCol={{
               span: 18,
            }}
            style={{
              maxWidth: 400,
            }}
            initialValues={{
              remember: true,
            }}
            onFinish={onFinishLimit}
            onFinishFailed={onFinishFailedLimit}
            autoComplete="off"
          >

            
{/* <Form.Item
              label="All numbers"
              name="is_all"
            >
<Checkbox onChange={onChangeCheck}></Checkbox>


</Form.Item> */}



            <Form.Item
              label="Bet code"
              name="betCode"
              rules={[
                {
                  required: !is_all,
                  message: 'Number required!',
                },
                {
                  pattern: /^.{2,8}$/,
                  message: 'Invalid Number'
                },
              ]}
            >
              {/* <Input style={{
                width: '100%',
              }}
              disabled={is_all}
              /> */}
              
              <Select>
              <Select.Option  value={'L2'}>L2</Select.Option>
              <Select.Option  value={'L3'}>L3</Select.Option>
              <Select.Option  value={'S3'}>S3</Select.Option>
              <Select.Option  value={'D4'}>D4</Select.Option>
              <Select.Option  value={'S4'}>S4</Select.Option>
              <Select.Option  value={'P3'}>P3</Select.Option>
              </Select>

            </Form.Item>


            



            <Form.Item
              label="Amount"
              name="bet_limit"
              rules={[
                {
                  required: true,
                  message: 'Limit required!',
                },
                // {
                //   pattern: /^[0-9]$/,
                //   message: 'Invalid Number'
                // },
              ]}
            >
              <InputNumber style={{
                width: '100%',
              }} />

            </Form.Item>

            <Form.Item
              wrapperCol={{
               
                 span: 18,
              }}

            >
              <Button type="primary" htmlType="submit">
                Submit
              </Button>



            </Form.Item>
          </Form>



        </Modal>
        {/* END LW MODAL */}

        <ToastContainer />
        </div>
        </Layout>
    )
}