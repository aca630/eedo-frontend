import moment from "moment";
import { useRouter } from "next/router";
import { useEffect, useState } from "react"
import { GetTallyPerDraw } from "../../api/tally";
import { GetSupervisor } from "../../api/supervisor";
import { GetActiveTellers, GetGrossPerDraw, GetTellerBetByID, GetTellerBets, GetTellerGrossPerDay } from "../../api/reports";
import { Avatar, Button, Divider, Form, Input, Modal, Popconfirm, Radio, Space, Spin, Table } from "antd";
import { EyeOutlined, PrinterOutlined, RollbackOutlined, UserOutlined } from "@ant-design/icons";
import Layout from "../../layouts";
import Head from "next/head";
import { putBet } from "../../api/void";
import { ToastContainer, toast } from "react-toastify";


export default function Home() {
    const [from, setFrom] = useState(moment().format('yyyy-MM-DD'))
    const [to, setTo] = useState(moment().add(1, 'days').format('yyyy-MM-DD'))
    const router = useRouter();
    const { tellerId } = router?.query;
    const { username } = router?.query;
    const { outlet } = router?.query;
    const [data, setData] = useState([])
    const [betViewData, setbetViewData] = useState([])
    const [spvrData, setspvrData] = useState([])
    const [isfetching, Setisfetching] = useState(false);
    const [OpenModal, setOpenModal] = useState(false);
    const [form] = Form.useForm();
    const handleCloseOpenModal = () => {
        setOpenModal(false);
    }


    useEffect(() => {



        handleGetData()
    }, [])



    const handleGetData = async () => {
        Setisfetching(true);
        try {
            let ApiResponse = await GetTellerBets({
                tellerId: tellerId,
                from: from,
                to: to
            })

            setData(ApiResponse.data?.data)
        }
        catch (error) {


        }
        Setisfetching(false);
    }


    const handleGetBetInfo = async (id) => {
        Setisfetching(true);
        try {
            let ApiResponse = await GetTellerBetByID({
                id: id
            })

            setbetViewData(ApiResponse.data?.data)
        }
        catch (error) {


        }
        Setisfetching(false);
    }


    function GetTotalCart() {

        let total = 0;
        betViewData.map((item, index) => {

            if (item?.isSoldOut == 0) {
                total += parseFloat(item?.betAmount);

            }


        })

        return total.toFixed(2)

    }


    const onFinish = async (values) => {
        Setisfetching(true)
        try {
            setData(data?.filter((item, key) => {

                if (item?.transactionId.indexOf(values?.transactionId.toUpperCase()) != -1) {

                    return item
                }

            }))
        }
        catch (error) {
            console.log(error);
        }

        Setisfetching(false)

    };
    const onFinishFailed = (errorInfo) => {
        console.log('Failed:', errorInfo);
    };


    const HandleVoid = async (values) => {
        try {
            let ApiResponse = await putBet({
                voidDate: moment().format('YYYY-MM-DD HH:mm'),
                isVoid: 1,
                isVoidByStaff: 1,
                transactionId: values?.transactionId
            })
            toast.warning('Voided!')
            handleGetData()
            setOpenModal(false)
        }
        catch (error) {
            console.log(error);

            toast.error('Request Failed!')

        }


    }


    return (


        <>

            <Layout>

                <Head>
                    <title>EEDO</title>
                    <meta name="description" content="Generated by create next app" />
                    <meta name="viewport" content="width=device-width, initial-scale=1" />
                    <link rel="icon" href="/favicon.ico" />
                </Head>


                <div>
                    <p className="mt-5 mb-2 text-center text-lg">Teller Transactions</p>


                    <div className="text-center bg-white rounded shadow p-2">
                        <Space>
                            <Avatar size={64} src={'/icon-512x512.png'} />
                            <div>
                                <p className="text-lg text-center">Teller: {username}</p>
                                <p className="text-lg text-center">Outlet: {outlet}</p>
                            </div>
                        </Space>

                        <div className="mb-2">
                            <Form form={form} name="horizontal_login" layout="inline" onFinish={onFinish}
                                onFinishFailed={onFinishFailed}
                                autoComplete="off" >
                                <Form.Item
                                    name="transactionId"
                                    rules={[
                                        {
                                            required: true,
                                            message: 'Please input transactionId!',
                                        },
                                    ]}
                                >
                                    <Input placeholder="transactionId" />
                                </Form.Item>
                                <Form.Item >
                                    <Button
                                        type="primary"
                                        htmlType="submit"

                                    >
                                        Search
                                    </Button>
                                </Form.Item>

                                <Form.Item >
                                    <Button
                                        type="default"
                                        onClick={(() => {
                                            handleGetData()
                                        })}

                                    >
                                        Refresh
                                    </Button>
                                </Form.Item>
                            </Form>
                        </div>
                    </div>


                    <div>




                        {
                            !isfetching ? <>

                                <div className="lg:grid lg:grid-cols-4 xl:gap-x-8  gap-y-2 gap-x-2 hover:cursor-pointer " style={{ maxHeight: '300px', overflowY: 'scroll' }}>

                                    {
                                        data?.map((item, key) => {


                                            return (
                                                <div key={key} className={`hover:bg-slate-200  border border-solid p-2 mt-1  rounded shadow-lg bg-white  border-slate-500 ${item?.isVoid == 1 ? 'bg-red' : ''}`}

                                                    onClick={(() => {
                                                        handleGetBetInfo(item?.transactionId)
                                                        setOpenModal(true)
                                                    })}
                                                >

                                                    <div>
                                                        <p>Trans. ID:{item?.transactionId}</p>
                                                        <p>Draw Time:{item?.drawTime > 12 ? `${item?.drawTime - 12}PM` : `${item?.drawTime}AM`}</p>
                                                        <p>Bet Time:{item?.created_at}</p>
                                                        <p>Total: ₱{item?.totalBetAmount}</p>
                                                    </div>
                                                </div>
                                            )
                                        })
                                    }
                                </div>

                            </> : <div className="text-center"><Spin tip='Loading...' /></div>
                        }

                    </div>
                </div>


                <Modal
                    title="Bet Information"
                    open={OpenModal}
                    // confirmLoading={confirmLoadingAdd}
                    onCancel={handleCloseOpenModal}

             width={800}
                footer={[]}
                >

                    {
                        !isfetching ? <div className="section">   <div className="mb-2">
                            <p>Trans. ID:<span className="text-blue-500">{betViewData[0]?.transactionId}</span></p>
                            <p>Draw Time:<span className="text-blue-500">{betViewData[0]?.drawTime > 12 ? `${betViewData[0]?.drawTime - 12}PM` : `${betViewData[0]?.drawTime}AM`}</span></p>
                            <p>Bet Time:<span className="text-blue-500">{betViewData[0]?.created_at}</span></p>
                            <p>Total:<span className="text-blue-500"> ₱{GetTotalCart()}</span></p>
                        </div>


                            <div className="lg:grid lg:grid-cols-5 xl:gap-x-2  gap-y-2 gap-x-2 hover:cursor-pointer ">

                                <div>
                                    <p>Bet Code</p>
                                </div>
                                <div>
                                    <p>Bet Number</p>
                                </div>
                                <div>
                                    <p>Bet Amount</p>
                                </div>
                                <div>
                                    <p></p>
                                </div>
                            </div>

                            <div style={{ maxHeight: '300px', overflowY: 'scroll' }}>

                                {
                                    betViewData?.map((item, key) => {


                                        return (
                                            <div key={key} className="lg:grid lg:grid-cols-5 xl:gap-x-2  gap-y-2 gap-x-2 hover:cursor-pointer ">
                                                <div>
                                                    <p>{item?.betCode}</p>
                                                </div>
                                                <div>
                                                    <p>{item?.betNo}</p>
                                                </div>
                                                <div>
                                                    <p>₱{item?.betAmount?.toFixed(2)}</p>
                                                </div>
                                                <div>
                                                    <p>{item?.isSoldOut == 1 ? 'S/O' : ''}</p>
                                                </div>

                                            </div>
                                        )
                                    })
                                }
                            </div>

                            {
                                betViewData[0]?.isVoid == 1 ? <span className="text-red-600 italic text-center slanted">This entry is voided.</span> :

                                    <>    <Popconfirm
                                        title={<p className="">Confirm Void?</p>}
                                        description={<p className="text-sm">Are you sure?</p>}

                                        onConfirm={(() => {
                                            HandleVoid(betViewData[0])
                                        })}

                                        okText="Yes"
                                        cancelText="No"
                                    >
                                        <Button className="mt-2 w-full bg-red-500 text-white  ">
                                            Void
                                        </Button>
                                    </Popconfirm>
                                    </>
                            }
                        </div> : <div className="text-center">
                            <Spin tip='Loading..' />
                        </div>
                    }





                </Modal>

                <ToastContainer />
            </Layout>
        </>


    )




}